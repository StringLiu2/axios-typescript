{"map":"{\"version\":3,\"file\":\"transform.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/core/transform.ts\"],\"names\":[],\"mappings\":\"AACA;;;;;GAKG;AACH,MAAM,CAAC,OAAO,UAAU,SAAS,CAAC,IAAS,EAAE,OAAY,EAAE,GAA2C;IAClG,iBAAiB;IACjB,IAAI,CAAC,GAAG;QAAE,OAAO,IAAI,CAAC;IACtB,aAAa;IACb,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACrB,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ;KACxB;IACD,4BAA4B;IAC5B,GAAG,CAAC,OAAO,CAAC,UAAC,EAAoB;QAC7B,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IACH,OAAO,IAAI,CAAC;AAChB,CAAC\"}","code":"/**\r\n * 对headers和data进行补充和转换，添加等操作的方法\r\n * @param data data数据\r\n * @param headers 请求头\r\n * @param fns 转换的方法数组或者方法\r\n */\r\nexport default function transform(data, headers, fns) {\r\n    // 当fns不存在的话，直接返回\r\n    if (!fns)\r\n        return data;\r\n    // 判断fns是不是数组\r\n    if (!Array.isArray(fns)) {\r\n        fns = [fns]; // 转换成数组\r\n    }\r\n    // 循环执行函数，获取data一直遍历到最后的data\r\n    fns.forEach(function (fn) {\r\n        data = fn(data, headers);\r\n    });\r\n    return data;\r\n}\r\n//# sourceMappingURL=transform.js.map","dts":{"name":"/Users/liu/Desktop/StrLiu/WebMaterial/Typescript-project/axios-typescript/dist/types/core/transform.d.ts","writeByteOrderMark":false,"text":"import { AxiosTransformer } from \"../types\";\r\n/**\r\n * 对headers和data进行补充和转换，添加等操作的方法\r\n * @param data data数据\r\n * @param headers 请求头\r\n * @param fns 转换的方法数组或者方法\r\n */\r\nexport default function transform(data: any, headers: any, fns?: AxiosTransformer | AxiosTransformer[]): any;\r\n"}}
