{"map":"{\"version\":3,\"file\":\"xhr.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/core/xhr.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { parseHeaders } from \"../helpers/headers\";\r\nimport { createError } from \"../helpers/error\";\r\nimport { isURLSameOrigin } from \"../helpers/url\";\r\nimport cookie from \"../helpers/cookie\";\r\nimport { isFormData } from \"../helpers/util\";\r\n/**\r\n * ajax处理发送请求然后返回promise对象\r\n * @param config 配置的选项参数，用于发送请求\r\n */\r\nexport default function xhr(config) {\r\n    return new Promise(function (resolve, reject) {\r\n        // 利用原生ajax发送\r\n        var url = config.url, data = config.data, method = config.method, _a = config.headers, headers = _a === void 0 ? {} : _a, responseType = config.responseType, timeout = config.timeout, cancelToken = config.cancelToken, withCredentials = config.withCredentials, xsrfHeaderName = config.xsrfHeaderName, xsrfCookieName = config.xsrfCookieName, onDownloadProgress = config.onDownloadProgress, onUploadProgress = config.onUploadProgress, auth = config.auth, validateStatus = config.validateStatus;\r\n        var request = new XMLHttpRequest();\r\n        // 设置请求头 url 是否是异步\r\n        request.open(method.toLocaleUpperCase(), url, true);\r\n        comfigureRequest(); // 添加配置\r\n        addEvents(); // 添加事件\r\n        processHeaders(); // 处理头部\r\n        processCancel(); // 请求取消\r\n        // 最后发送请求\r\n        request.send(data);\r\n        /**\r\n         * 配置请求\r\n         */\r\n        function comfigureRequest() {\r\n            if (responseType) { // 看看设置了responseType没有，设置了就赋值\r\n                request.responseType = responseType;\r\n            }\r\n            // 请求超时配置，默认为0,永不超时\r\n            if (timeout) {\r\n                request.timeout = timeout;\r\n            }\r\n            // 判断withCredentials是否设置了没，所以要不要带cookies\r\n            if (withCredentials) {\r\n                request.withCredentials = withCredentials; // 然后设置ajax的请求,这时候跨域请求就会携带cookies\r\n            }\r\n        }\r\n        /**\r\n         * request事件处理函数\r\n         */\r\n        function addEvents() {\r\n            // 请求完成处理\r\n            request.onreadystatechange = function handleLoad() {\r\n                // 状态不是4的情况下，处理\r\n                if (request.readyState !== 4) {\r\n                    return;\r\n                }\r\n                // 网络错误，超时错误\r\n                if (request.status === 0) {\r\n                    return;\r\n                }\r\n                // 获取响应的头信息，然后对这个头信息字符串进行处理分割成对象\r\n                var responseHeaders = parseHeaders(request.getAllResponseHeaders());\r\n                // 获取响应数据,当responseType不是text的情况下，直接获取request.response的数值，否则就是request.responseText的值\r\n                var responseData = (responseType && responseType !== 'text') ? request.response : request.responseText;\r\n                // 设置返回的数据类型\r\n                var response = {\r\n                    data: responseData,\r\n                    status: request.status,\r\n                    statusText: request.statusText,\r\n                    headers: responseHeaders,\r\n                    config: config,\r\n                    request: request\r\n                };\r\n                // 然后返回这个axios的响应,同时处理了一下response\r\n                handleResponse(response);\r\n            };\r\n            // 请求错误的事件\r\n            request.onerror = function handleError() {\r\n                reject(createError('Network Error', config, null, request)); // 网络错误处理，信息网络错误处理\r\n            };\r\n            // 处理超时\r\n            request.ontimeout = function handleTimeout() {\r\n                // ECONNABORTED网络被终止\r\n                reject(createError(\"Timeout of \" + timeout + \" ms exceeded\", config, 'ECONNABORTED', request));\r\n            };\r\n            // 配置如果文件情况下的下载和上传进度\r\n            if (onDownloadProgress) {\r\n                // 执行事件函数\r\n                request.onprogress = onDownloadProgress;\r\n            }\r\n            if (onUploadProgress) {\r\n                request.upload.onprogress = onUploadProgress;\r\n            }\r\n        }\r\n        /**\r\n         * 对请求headers进行处理的函数\r\n         */\r\n        function processHeaders() {\r\n            // 判断是不是form表单数据\r\n            if (isFormData(data)) {\r\n                delete headers['Content-Type'];\r\n            }\r\n            // 设置cookie header 当是同源请求或者设置了withCredentials的情况下，并且xsrfCookieName有值\r\n            if ((withCredentials || isURLSameOrigin(url)) && xsrfCookieName) {\r\n                // 然后再读取cookie\r\n                var xsrfValue = cookie.read(xsrfCookieName);\r\n                // 判断这个值有没有，xsrfHeaderName有没有设置，有的话设置到headers上面\r\n                if (xsrfValue && xsrfHeaderName) {\r\n                    headers[xsrfHeaderName] = xsrfValue;\r\n                }\r\n            }\r\n            // 设置Authorization安全认证\r\n            if (auth) {\r\n                // 当设置了auth之后，给Authorization属性设置 Basic+base64的内容\r\n                headers['Authorization'] = 'Basic ' + btoa(auth.username + \":\" + auth.password);\r\n            }\r\n            // 循环遍历放入ajax请求的header\r\n            Object.keys(headers).forEach(function (key) {\r\n                // 当data为空，并且设置了content-type的header这个请求头的情况下，删掉\r\n                if (data === null && key.toLowerCase() === 'content-type') {\r\n                    delete headers[key];\r\n                }\r\n                else {\r\n                    // 如果不是 则设置请求头\r\n                    request.setRequestHeader(key, headers[key]);\r\n                }\r\n            });\r\n        }\r\n        /**\r\n         * 对取消请求的处理\r\n         */\r\n        function processCancel() {\r\n            // 判断cancelToken存在不\r\n            if (cancelToken) {\r\n                // 执行promise,等到外部调用CancelToken类的时候，this.promise也就会有值，这时候就执行了下面的then\r\n                cancelToken\r\n                    // promise实现异步分离\r\n                    .promise\r\n                    .then(function (reason) {\r\n                    request.abort(); // 取消请求\r\n                    reject(reason); // 然后把传入的reason这个Cancel实例返回出去\r\n                }).catch(\r\n                /* istanbul ignore next */\r\n                function () {\r\n                    // doNoting\r\n                });\r\n            }\r\n        }\r\n        /**\r\n         * 处理响应的函数\r\n         * @param response 处理response\r\n         */\r\n        function handleResponse(response) {\r\n            // 没有 或者返回为true的情况下，就是合法状态值\r\n            if (!validateStatus || validateStatus(response.status)) {\r\n                // 状态码等于这个得情况下，直接返回\r\n                resolve(response);\r\n            }\r\n            else {\r\n                // 否则就是300-500之间的错误\r\n                reject(createError(\"Request failed with status code \" + response.status, config, null, request, response));\r\n            }\r\n        }\r\n    });\r\n}\r\n//# sourceMappingURL=xhr.js.map","dts":{"name":"/Users/liu/Desktop/StrLiu/WebMaterial/Typescript-project/axios-typescript/dist/types/core/xhr.d.ts","writeByteOrderMark":false,"text":"import { AxiosRequestConfig, AxiosPromise } from \"../types\";\r\n/**\r\n * ajax处理发送请求然后返回promise对象\r\n * @param config 配置的选项参数，用于发送请求\r\n */\r\nexport default function xhr(config: AxiosRequestConfig): AxiosPromise;\r\n"}}
