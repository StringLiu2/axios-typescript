{"map":"{\"version\":3,\"file\":\"interceptorManger.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/core/interceptorManger.ts\"],\"names\":[],\"mappings\":\"AAQA;;GAEG;AACH;IAGI;QACI,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC3B,CAAC;IACD,+BAAG,GAAH,UAAI,QAAuB,EAAE,QAAqB;QAC9C,QAAQ;QACR,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;YACnB,QAAQ,UAAA;YACR,QAAQ,UAAA;SACX,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,SAAS;IAClD,CAAC;IACD,iCAAK,GAAL,UAAM,EAAU;QACZ,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE,EAAE,0BAA0B;YACnD,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;SAChC;IACL,CAAC;IACD,UAAU;IACV,mCAAO,GAAP,UAAQ,EAAyC;QAC7C,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,WAAW;YAClC,kBAAkB;YAClB,IAAG,WAAW,KAAK,IAAI,EAAC;gBACpB,EAAE,CAAC,WAAW,CAAC,CAAC;aACnB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACL,wBAAC;AAAD,CAAC,AA5BD,IA4BC\"}","code":"/**\r\n * 拦截器管理类\r\n */\r\nvar InterceptorManger = /** @class */ (function () {\r\n    function InterceptorManger() {\r\n        this.interceptors = [];\r\n    }\r\n    InterceptorManger.prototype.use = function (resolved, rejected) {\r\n        // 添加拦截器\r\n        this.interceptors.push({\r\n            resolved: resolved,\r\n            rejected: rejected\r\n        });\r\n        return this.interceptors.length - 1; // 长度就是id\r\n    };\r\n    InterceptorManger.prototype.eject = function (id) {\r\n        if (this.interceptors[id]) { // 当这个拦截器存在，则把对应的位置的拦截器制为空\r\n            this.interceptors[id] = null;\r\n        }\r\n    };\r\n    // 循环执行拦截器\r\n    InterceptorManger.prototype.forEach = function (fn) {\r\n        this.interceptors.forEach(function (interceptor) {\r\n            // 当拦截器不为null就直接运行\r\n            if (interceptor !== null) {\r\n                fn(interceptor);\r\n            }\r\n        });\r\n    };\r\n    return InterceptorManger;\r\n}());\r\nexport default InterceptorManger;\r\n//# sourceMappingURL=interceptorManger.js.map","dts":{"name":"/Users/liu/Desktop/StrLiu/WebMaterial/Typescript-project/axios-typescript/dist/types/core/interceptorManger.d.ts","writeByteOrderMark":false,"text":"import { AxiosInterceptorManager, ResolvedFn, RejectedFn } from \"../types\";\r\n/**\r\n * 存储拦截器的类型\r\n */\r\ninterface Interceptor<T> {\r\n    resolved: ResolvedFn<T>;\r\n    rejected?: RejectedFn;\r\n}\r\n/**\r\n * 拦截器管理类\r\n */\r\nexport default class InterceptorManger<T> implements AxiosInterceptorManager<T> {\r\n    private interceptors;\r\n    constructor();\r\n    use(resolved: ResolvedFn<T>, rejected?: RejectedFn): number;\r\n    eject(id: number): void;\r\n    forEach(fn: (interceptor: Interceptor<T>) => void): void;\r\n}\r\nexport {};\r\n"}}
