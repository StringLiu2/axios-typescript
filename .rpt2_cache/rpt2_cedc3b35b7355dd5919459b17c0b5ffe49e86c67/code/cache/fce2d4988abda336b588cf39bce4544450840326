{"map":"{\"version\":3,\"file\":\"headers.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/helpers/headers.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AAGlD;;;;GAIG;AACH,SAAS,mBAAmB,CAAC,OAAY,EAAE,aAAqB;IAC5D,IAAI,CAAC,OAAO,EAAE,EAAE,uBAAuB;QACnC,OAAO;KACV;IACD,mBAAmB;IACnB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,GAAW;QACrC,0CAA0C;QAC1C,IAAI,GAAG,KAAK,aAAa,IAAI,GAAG,CAAC,WAAW,EAAE,KAAK,aAAa,CAAC,WAAW,EAAE,EAAE;YAC5E,6CAA6C;YAC7C,OAAO,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;YACtC,mBAAmB;YACnB,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;SACvB;IACL,CAAC,CAAC,CAAC;AACP,CAAC;AACD;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,OAAY,EAAE,IAAS;IAClD,kCAAkC;IAClC,mBAAmB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;IAC7C,gBAAgB;IAChB,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE;QACrB,8BAA8B;QAC9B,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;YACrC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC,CAAC;SAC9D;KACJ;IACD,OAAO,OAAO,CAAC;AACnB,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,YAAY,CAAC,OAAe;IACxC,UAAU;IACV,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACjC,uBAAuB;IACvB,IAAI,CAAC,OAAO,EAAE;QACV,OAAO,MAAM,CAAC;KACjB;IACD,sBAAsB;IACtB,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAC,IAAY;QACvC,YAAY;QACR,IAAA,oBAAgC,EAA/B,WAAG,EAAE,kBAA0B,CAAC,CAAC,oCAAoC;QAC1E,sBAAsB;QACtB,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACzB,sBAAsB;QACtB,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC/B,kBAAkB;QAClB,IAAI,CAAC,GAAG;YAAE,OAAO;QACjB,IAAI,GAAG,EAAE,EAAE,qBAAqB;YAC5B,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;SACpB;QACD,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,cAAc;IACrC,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC,CAAC,iBAAiB;AACpC,CAAC;AACD;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,OAAY,EAAE,MAAc;IACvD,IAAI,CAAC,OAAO;QAAE,OAAO,OAAO,CAAC;IAC7B,8BAA8B;IAC9B,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC;IAC9D,kBAAkB;IAClB,IAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC/F,eAAe,CAAC,OAAO,CAAC,UAAC,GAAW;QAChC,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;IACH,OAAO,OAAO,CAAC;AACnB,CAAC\"}","code":"import { isPlainObject, deepMerge } from \"./util\";\r\n/**\r\n * 对普通函数的大小写不敏感规范，变成大写\r\n * @param headers 需要被转换成首字母大写key的对象\r\n * @param normalizaName 首字母大写的key\r\n */\r\nfunction normalizeHeaderName(headers, normalizaName) {\r\n    if (!headers) { // 当headers不存在的时候，直接不处理\r\n        return;\r\n    }\r\n    // 存在的话 遍历headers对象\r\n    Object.keys(headers).forEach(function (key) {\r\n        // key和normalizaName不相等，并且key全部大写的时候值是相等的话\r\n        if (key !== normalizaName && key.toUpperCase() === normalizaName.toUpperCase()) {\r\n            // 然后把全小写的key对应的值赋值给首字母大写的key为normalizaName的值\r\n            headers[normalizaName] = headers[key];\r\n            // 然后删除掉小写的，变成首字母大写\r\n            delete headers[key];\r\n        }\r\n    });\r\n}\r\n/**\r\n * 对请求的headers进行处理，设置属性\r\n * @param headers 需要被处理的headers\r\n * @param data 判断这个是不是普通对象来设置headers的Content-Type参数\r\n */\r\nexport function processHeaders(headers, data) {\r\n    // 先处理一下，转换一下headers的属性的key变成首字母大写\r\n    normalizeHeaderName(headers, 'Content-Type');\r\n    // 判断data是不是普通对象\r\n    if (isPlainObject(data)) {\r\n        // 并且headers存在，没设置Content-Type\r\n        if (headers && !headers['Content-Type']) {\r\n            headers['Content-Type'] = 'application/json;charset=utf-8';\r\n        }\r\n    }\r\n    return headers;\r\n}\r\n/**\r\n * 对返回的headers进行处理变成一个对象\r\n * @param headers 转换成对象的headers\r\n */\r\nexport function parseHeaders(headers) {\r\n    // 创建一个空对象\r\n    var parsed = Object.create(null);\r\n    // 当headers不存在的时候，返回空对象\r\n    if (!headers) {\r\n        return parsed;\r\n    }\r\n    // 对headers这个字符串进行换行分割\r\n    headers.split('\\r\\n').forEach(function (line) {\r\n        // 然后对冒号进行分割\r\n        var _a = line.split(':'), key = _a[0], vals = _a.slice(1); // 例如 Content-Type: application/json\r\n        // 然后把后面所有包含:被切割的值合并一起\r\n        var val = vals.join(':');\r\n        // 然后对key进行去除空格,然后转成小谢\r\n        key = key.trim().toLowerCase();\r\n        // 当key为空的话，跳出本次循环\r\n        if (!key)\r\n            return;\r\n        if (val) { // 判断val有没有，有则就直接去掉空格\r\n            val = val.trim();\r\n        }\r\n        parsed[key] = val; // 然后存入到parsed\r\n    });\r\n    return parsed; // 最后返回这个parsed对象\r\n}\r\n/**\r\n * 提取headers里面的一些common、post什么的提取出来，按照method来提取\r\n * @param headers\r\n * @param method\r\n */\r\nexport function flattenHeaders(headers, method) {\r\n    if (!headers)\r\n        return headers;\r\n    // 拷贝common、method对应的请求方式，还有自身\r\n    headers = deepMerge(headers.common, headers[method], headers);\r\n    // 删除headers里面这些字段\r\n    var methodsToDelete = ['delete', 'get', 'head', 'options', 'post', 'put', 'patch', 'common'];\r\n    methodsToDelete.forEach(function (key) {\r\n        delete headers[key];\r\n    });\r\n    return headers;\r\n}\r\n//# sourceMappingURL=headers.js.map","dts":{"name":"/Users/liu/Desktop/StrLiu/WebMaterial/Typescript-project/axios-typescript/dist/types/helpers/headers.d.ts","writeByteOrderMark":false,"text":"import { Method } from \"../types\";\r\n/**\r\n * 对请求的headers进行处理，设置属性\r\n * @param headers 需要被处理的headers\r\n * @param data 判断这个是不是普通对象来设置headers的Content-Type参数\r\n */\r\nexport declare function processHeaders(headers: any, data: any): any;\r\n/**\r\n * 对返回的headers进行处理变成一个对象\r\n * @param headers 转换成对象的headers\r\n */\r\nexport declare function parseHeaders(headers: string): any;\r\n/**\r\n * 提取headers里面的一些common、post什么的提取出来，按照method来提取\r\n * @param headers\r\n * @param method\r\n */\r\nexport declare function flattenHeaders(headers: any, method: Method): any;\r\n"}}
