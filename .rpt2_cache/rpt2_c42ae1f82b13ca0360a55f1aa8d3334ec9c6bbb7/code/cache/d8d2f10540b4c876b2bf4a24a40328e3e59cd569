{"map":"{\"version\":3,\"file\":\"url.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/helpers/url.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { isDate, isObject, isURLSearchParams } from \"./util\";\r\n/**\r\n * 把字符串转换成encode，然后把@:$,+[]转换回去\r\n * @param val 转换成encode编码的字符串\r\n */\r\nfunction encode(val) {\r\n    return encodeURIComponent(val)\r\n        // 把特殊字符转换回去\r\n        .replace(/%40/g, '@')\r\n        .replace(/%3A/ig, ':')\r\n        .replace(/%24/g, '$')\r\n        .replace(/%2C/ig, ',')\r\n        .replace(/%20/g, '+')\r\n        .replace(/%5B/ig, '[')\r\n        .replace(/%5D/ig, ']'); // i就是标识大小写区分，g就是全局查找\r\n}\r\n/**\r\n * 对url进行处理，空指针忽略，空格转换成+，丢弃#这个哈希标记以及后面部分的字符串\r\n * @param url 需要处理的url\r\n * @param params 弄到url上面的参数对象\r\n * @param paramsSerializer 序列化params的方法\r\n */\r\nexport function buildURL(url, params, paramsSerializer) {\r\n    if (!params)\r\n        return url;\r\n    var serializedParams; // 存储序列化后的params字符串\r\n    // 判断用户有没有定义这个函数序列化规则，没有则我们处理，有他们来处理\r\n    if (paramsSerializer) {\r\n        serializedParams = paramsSerializer(params);\r\n    }\r\n    else if (isURLSearchParams(params)) { // 判断params是不是URLSearchParans\r\n        serializedParams = params.toString();\r\n    }\r\n    else {\r\n        var parts_1 = []; // 用来保存params\r\n        // 对params进行获取key，然后循环获取到值\r\n        Object.keys(params).forEach(function (key) {\r\n            var val = params[key];\r\n            // 判断值是什么类型的，做下一步操作\r\n            if (val === null || typeof val === 'undefined') {\r\n                return; // 跳出本次循环\r\n            }\r\n            // 临时数组，判断是不是数组\r\n            var values = [];\r\n            // 是数组的情况下，key改变\r\n            if (Array.isArray(val)) {\r\n                values = val;\r\n                key += '[]';\r\n                // 不是数组的情况下，变成数组\r\n            }\r\n            else {\r\n                values = [val];\r\n            }\r\n            // 遍历values\r\n            values.forEach(function (val) {\r\n                // 当value时Date的情况下\r\n                if (isDate(val)) {\r\n                    val = val.toISOString();\r\n                }\r\n                else if (isObject(val)) {\r\n                    val = JSON.stringify(val); // 对象的话转换成字符串\r\n                }\r\n                parts_1.push(encode(key) + \"=\" + encode(val));\r\n            });\r\n        });\r\n        // 拼接query参数\r\n        serializedParams = parts_1.join('&');\r\n    }\r\n    // 判断parts有没有\r\n    if (serializedParams) {\r\n        // 然后判断url里面有没有哈希的#，有就去掉\r\n        var markIndex = url.indexOf('#');\r\n        // 去掉#\r\n        if (markIndex !== -1) {\r\n            url = url.slice(0, markIndex);\r\n        }\r\n        // 最后判断一下有没有?,如果没有?则表示url已经有参数了，有?则表示还没拼接\r\n        url += ((url.indexOf('?') === -1) ? '?' : '&') + serializedParams;\r\n    }\r\n    // 最后把拼接完毕的url返回出去\r\n    return url;\r\n}\r\n/**\r\n * 同源的url，\r\n * 利用dom对象的a标签，设置url的属性，解析出端口和协议，然后请求url和当前页面url比较\r\n */\r\nexport function isURLSameOrigin(requestURL) {\r\n    // 获取请求的url和接口\r\n    var parsedOrgin = resolveURL(requestURL);\r\n    // 判断本地的和发送请求的协议和端口\r\n    return (parsedOrgin.protocol === currentOrigin.protocol) && (parsedOrgin.host === currentOrigin.host);\r\n}\r\n// 创建一个a标签dom节点\r\nvar urlParsingNode = document.createElement('a');\r\n// 解析当前页面的href，防止跨域攻击\r\nvar currentOrigin = resolveURL(window.location.href);\r\n/**\r\n * 辅助函数，用来发送请求的时候获取协议和端口\r\n */\r\nfunction resolveURL(url) {\r\n    // 设置一下href\r\n    urlParsingNode.setAttribute('href', url);\r\n    var protocol = urlParsingNode.protocol, host = urlParsingNode.host; // 解构赋值获取protocol(协议)，host(端口)\r\n    return {\r\n        protocol: protocol,\r\n        host: host\r\n    };\r\n}\r\n/**\r\n * 判断是不是请求xxx.xxx.xx开头的，返回true就是绝对地址\r\n */\r\nexport function isAbsoluteURL(url) {\r\n    return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url); // 忽略大小写\r\n}\r\n/**\r\n * 拼接baseURL + url 成一个新的url\r\n * @param baseURL 默认的baseURL\r\n * @param relativeURL 拼接的url\r\n */\r\nexport function combineURL(baseURL, relativeURL) {\r\n    // 清理斜线\r\n    return relativeURL ? baseURL.replace(/\\/+$/, '') + \"/\" + relativeURL.replace(/^\\/+/, '') : baseURL;\r\n}\r\n//# sourceMappingURL=url.js.map","dts":{"name":"/Users/liu/Desktop/StrLiu/WebMaterial/Typescript-project/axios-typescript/dist/types/helpers/url.d.ts","writeByteOrderMark":false,"text":"/**\r\n * 对url进行处理，空指针忽略，空格转换成+，丢弃#这个哈希标记以及后面部分的字符串\r\n * @param url 需要处理的url\r\n * @param params 弄到url上面的参数对象\r\n * @param paramsSerializer 序列化params的方法\r\n */\r\nexport declare function buildURL(url: string, params?: any, paramsSerializer?: (params: any) => string): string;\r\n/**\r\n * 同源的url，\r\n * 利用dom对象的a标签，设置url的属性，解析出端口和协议，然后请求url和当前页面url比较\r\n */\r\nexport declare function isURLSameOrigin(requestURL: string): boolean;\r\n/**\r\n * 判断是不是请求xxx.xxx.xx开头的，返回true就是绝对地址\r\n */\r\nexport declare function isAbsoluteURL(url: string): boolean;\r\n/**\r\n * 拼接baseURL + url 成一个新的url\r\n * @param baseURL 默认的baseURL\r\n * @param relativeURL 拼接的url\r\n */\r\nexport declare function combineURL(baseURL: string, relativeURL?: string): string;\r\n"}}
