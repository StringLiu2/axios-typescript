{"map":"{\"version\":3,\"file\":\"util.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/helpers/util.ts\"],\"names\":[],\"mappings\":\"AAAA,IAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,kBAAkB;AAC9D;;;GAGG;AACH,MAAM,UAAU,MAAM,CAAC,GAAQ;IAC3B,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,eAAe,CAAC;AAClD,CAAC;AACD;;;GAGG;AACH,MAAM,UAAU,QAAQ,CAAC,GAAQ;IAC7B,OAAO,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAC;AACnD,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,aAAa,CAAC,GAAQ;IAClC,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,iBAAiB,CAAC;AACpD,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,MAAM,CAAO,EAAK,EAAE,IAAO;IACvC,YAAY;IACZ,KAAK,IAAM,GAAG,IAAI,IAAI,EAAE;QACnB,EAAY,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAQ,CAAC;KACzC;IACD,OAAO,EAAW,CAAC;AACvB,CAAC;AACD;;GAEG;AACH,MAAM,UAAU,SAAS;IAAC,cAAc;SAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;QAAd,yBAAc;;IACpC,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU;IAC9C,IAAI,CAAC,OAAO,CAAC,UAAC,GAAQ;QAClB,IAAI,GAAG,EAAE,EAAE,uCAAuC;YAC9C,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAC,GAAW;gBACjC,IAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;gBACrB,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE,EAAE,cAAc;oBACpC,IAAI,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,mDAAmD;wBACjF,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;qBAC7C;yBAAM;wBACH,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;qBAChC;iBACJ;qBAAM,EAAE,WAAW;oBAChB,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;iBACrB;YACL,CAAC,CAAC,CAAC;SACN;IACL,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC,CAAC,aAAa;AAChC,CAAC;AACD;;GAEG;AACH,MAAM,UAAU,UAAU,CAAC,GAAQ;IAC/B,yBAAyB;IACzB,OAAO,OAAO,GAAG,KAAK,WAAW,IAAI,GAAG,YAAY,QAAQ,CAAC;AACjE,CAAC;AACD;;;GAGG;AACH,MAAM,UAAU,iBAAiB,CAAC,GAAO;IACrC,OAAO,OAAO,GAAG,KAAK,WAAW,IAAI,GAAG,YAAY,eAAe,CAAC;AACxE,CAAC\"}","code":"var toString = Object.prototype.toString; // 对象上面的toString方法\r\n/**\r\n * 判断是不是应该date类型,返回类型保护\r\n * @param val 需要被判断的值\r\n */\r\nexport function isDate(val) {\r\n    return toString.call(val) === '[object Date]';\r\n}\r\n/**\r\n * 判断是不是对象\r\n * @param val 需要被判断的值\r\n */\r\nexport function isObject(val) {\r\n    return val !== null && typeof val === 'object';\r\n}\r\n/**\r\n * 判断是不是普通对象\r\n * @param val val就是需要判断的那个\r\n */\r\nexport function isPlainObject(val) {\r\n    return toString.call(val) === '[object Object]';\r\n}\r\n/**\r\n * 把Axios对象的属性拷贝到extend中的函数\r\n * @param to 合并到的那个\r\n * @param from 需要被合并的\r\n */\r\nexport function extend(to, from) {\r\n    // 循环拷贝属性，方法\r\n    for (var key in from) {\r\n        to[key] = from[key];\r\n    }\r\n    return to;\r\n}\r\n/**\r\n * 对普通对象进行深拷贝\r\n */\r\nexport function deepMerge() {\r\n    var objs = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        objs[_i] = arguments[_i];\r\n    }\r\n    var result = Object.create(null); // 创建一个空对象\r\n    objs.forEach(function (obj) {\r\n        if (obj) { // 获得每个对象不能为空，然后对每个对象的key进行获取处理判断是不是普通值\r\n            Object.keys(obj).forEach(function (key) {\r\n                var val = obj[key];\r\n                if (isPlainObject(val)) { // 如果还是对象，继续递归\r\n                    if (isPlainObject(result[key])) { // 如果result里面存在的话，把result[key], val都拷贝到result[key]中\r\n                        result[key] = deepMerge(result[key], val);\r\n                    }\r\n                    else {\r\n                        result[key] = deepMerge(val);\r\n                    }\r\n                }\r\n                else { // 普通值就直接赋值\r\n                    result[key] = val;\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return result; // 最后返回result\r\n}\r\n/**\r\n * 扩展方法，判断是不是formData\r\n */\r\nexport function isFormData(val) {\r\n    // 是不是为空并且，是不是FormData的实例\r\n    return typeof val !== 'undefined' && val instanceof FormData;\r\n}\r\n/**\r\n * 判断是不是URLSearchParams类型的参数\r\n * @param val 接收一个params参数\r\n */\r\nexport function isURLSearchParams(val) {\r\n    return typeof val !== 'undefined' && val instanceof URLSearchParams;\r\n}\r\n//# sourceMappingURL=util.js.map","dts":{"name":"/Users/liu/Desktop/StrLiu/WebMaterial/Typescript-project/axios-typescript/dist/types/helpers/util.d.ts","writeByteOrderMark":false,"text":"/**\r\n * 判断是不是应该date类型,返回类型保护\r\n * @param val 需要被判断的值\r\n */\r\nexport declare function isDate(val: any): val is Date;\r\n/**\r\n * 判断是不是对象\r\n * @param val 需要被判断的值\r\n */\r\nexport declare function isObject(val: any): val is Object;\r\n/**\r\n * 判断是不是普通对象\r\n * @param val val就是需要判断的那个\r\n */\r\nexport declare function isPlainObject(val: any): val is Object;\r\n/**\r\n * 把Axios对象的属性拷贝到extend中的函数\r\n * @param to 合并到的那个\r\n * @param from 需要被合并的\r\n */\r\nexport declare function extend<T, U>(to: T, from: U): T & U;\r\n/**\r\n * 对普通对象进行深拷贝\r\n */\r\nexport declare function deepMerge(...objs: any[]): any;\r\n/**\r\n * 扩展方法，判断是不是formData\r\n */\r\nexport declare function isFormData(val: any): val is FormData;\r\n/**\r\n * 判断是不是URLSearchParams类型的参数\r\n * @param val 接收一个params参数\r\n */\r\nexport declare function isURLSearchParams(val: any): val is URLSearchParams;\r\n"}}
