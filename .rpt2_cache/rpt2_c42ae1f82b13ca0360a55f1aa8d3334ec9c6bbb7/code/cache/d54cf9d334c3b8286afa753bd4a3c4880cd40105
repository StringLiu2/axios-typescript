{"map":"{\"version\":3,\"file\":\"Axios.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/core/Axios.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import dispatchRequest, { transformURL } from './dispatchRequest';\r\nimport InterceptorManger from './interceptorManger';\r\nimport mergeConfig from './mergeConfig';\r\n/**\r\n * axios类的配置，配置拦截器、defaults、request、get、post、delete等等等。\r\n * 同时还执行了拦截器\r\n */\r\nvar Axios = /** @class */ (function () {\r\n    function Axios(defaults) {\r\n        this.defaults = defaults;\r\n        // 初始化拦截器\r\n        this.interceptors = {\r\n            request: new InterceptorManger(),\r\n            response: new InterceptorManger(),\r\n        };\r\n    }\r\n    Axios.prototype.request = function (url, config) {\r\n        if (typeof url === 'string') {\r\n            // 当url为字符串的情况下\r\n            if (!config) { // 判断config有没有传，没有则制为空对象\r\n                config = {};\r\n            }\r\n            // 然后对config的url 赋值 url\r\n            config.url = url;\r\n        }\r\n        else {\r\n            // 当url是AxiosRequestConfig的情况下，直接把url赋值给config\r\n            config = url;\r\n        }\r\n        // 先合并一下config\r\n        config = mergeConfig(this.defaults, config); // 合并配置，以用户的配置config有限\r\n        // 转换成小写\r\n        config.method = config.method.toLowerCase();\r\n        // 初始化拦截器链,里面一堆拦截器，初始值\r\n        var chain = [\r\n            {\r\n                resolved: dispatchRequest,\r\n                rejected: undefined,\r\n            }\r\n        ];\r\n        // 都是顺序执行传入的use(xxx)的回调函数，第一个就是resolve，第二个就是reject，每次都执行这两个成功/失败的回调，不为空的情况下\r\n        // 循环请求拦截器，放到拦截器链中，在中间的请求拦截器之前\r\n        this.interceptors.request.forEach(function (interceptor) {\r\n            chain.unshift(interceptor); // 因为先添加后执行，所以往前面放,放入的数据就是request的参数\r\n        });\r\n        // 循环响应拦截器，也放入到拦截器链中，在中间的请求拦截器之后\r\n        this.interceptors.response.forEach(function (interceptor) {\r\n            // 先通过ajax请求获取到response，返回的数据，然后提供给后面的响应拦截器使用\r\n            chain.push(interceptor); // 因为先添加先执行，所以往后面放,放入的数据是响应的response\r\n        });\r\n        // 创建一个promise\r\n        // 传入的config就是AxiosReuqestConfig类型的对象，当这个promise链的默认类型，后面就是每次拦截成功或者失败的类型当下一个参数\r\n        var promise = Promise.resolve(config);\r\n        // while循环拿出每个元素\r\n        while (chain.length) {\r\n            var _a = chain.shift(), resolved = _a.resolved, rejected = _a.rejected; // 然后类型断言不为空\r\n            // 每次循环都会执行下一个拦截器，每次都是执行下一个拦截器\r\n            promise = promise.then(rejected, resolved);\r\n        }\r\n        // 最后返回的就是一个promise继续执行then那些\r\n        return promise;\r\n    };\r\n    Axios.prototype.get = function (url, config) {\r\n        // 合并config和rul\r\n        return this._requestMethodWithoutData(url, 'get', config);\r\n    };\r\n    Axios.prototype.delete = function (url, config) {\r\n        return this._requestMethodWithoutData(url, 'delete', config);\r\n    };\r\n    Axios.prototype.head = function (url, config) {\r\n        return this._requestMethodWithoutData(url, 'head', config);\r\n    };\r\n    Axios.prototype.options = function (url, config) {\r\n        return this._requestMethodWithoutData(url, 'options', config);\r\n    };\r\n    // 合并config、url和method的方法\r\n    Axios.prototype._requestMethodWithoutData = function (url, method, config) {\r\n        return this.request(Object.assign(config || {}, {\r\n            url: url,\r\n            method: method,\r\n        }));\r\n    };\r\n    Axios.prototype.post = function (url, data, config) {\r\n        return this._requestMethodWithData(url, 'post', data, config);\r\n    };\r\n    Axios.prototype.put = function (url, data, config) {\r\n        return this._requestMethodWithData(url, 'put', data, config);\r\n    };\r\n    Axios.prototype.patch = function (url, data, config) {\r\n        return this._requestMethodWithData(url, 'patch', data, config);\r\n    };\r\n    // 合并config、data、url和method的方法\r\n    Axios.prototype._requestMethodWithData = function (url, method, data, config) {\r\n        return this.request(Object.assign(config || {}, {\r\n            url: url,\r\n            method: method,\r\n            data: data,\r\n        }));\r\n    };\r\n    Axios.prototype.getUri = function (config) {\r\n        // 先合并一下config\r\n        config = mergeConfig(this.defaults, config);\r\n        // 最后转换一个url，然后返回出去\r\n        return transformURL(config);\r\n    };\r\n    return Axios;\r\n}());\r\nexport default Axios;\r\n//# sourceMappingURL=Axios.js.map","dts":{"name":"/Users/liu/Desktop/StrLiu/WebMaterial/Typescript-project/axios-typescript/dist/types/core/Axios.d.ts","writeByteOrderMark":false,"text":"import { Axios as AxiosInterface, AxiosRequestConfig, AxiosPromise, AxiosInterceptors } from '../types';\r\n/**\r\n * axios类的配置，配置拦截器、defaults、request、get、post、delete等等等。\r\n * 同时还执行了拦截器\r\n */\r\nexport default class Axios implements AxiosInterface {\r\n    defaults: AxiosRequestConfig;\r\n    interceptors: AxiosInterceptors;\r\n    constructor(defaults: AxiosRequestConfig);\r\n    request<T = any>(url: AxiosRequestConfig | string, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n    get<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n    delete<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n    head<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n    options<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n    private _requestMethodWithoutData;\r\n    post<T = any>(url: string, data?: T, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n    put<T = any>(url: string, data?: T, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n    patch<T = any>(url: string, data?: T, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n    private _requestMethodWithData;\r\n    getUri(config: AxiosRequestConfig): string;\r\n}\r\n"}}
