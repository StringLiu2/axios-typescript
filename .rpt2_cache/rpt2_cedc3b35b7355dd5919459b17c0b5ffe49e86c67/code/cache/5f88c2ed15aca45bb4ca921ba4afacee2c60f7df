{"map":"{\"version\":3,\"file\":\"margeConfig.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/core/margeConfig.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC3D,eAAe;AACf,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACnC;;;;GAIG;AACH,SAAS,YAAY,CAAC,IAAS,EAAE,IAAS;IACtC,eAAe;IACf,OAAO,OAAO,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;AACrD,CAAC;AACD;;;;GAIG;AACH,SAAS,aAAa,CAAC,IAAS,EAAE,IAAS;IACvC,IAAI,OAAO,IAAI,KAAK,WAAW;QAAE,OAAO,IAAI,CAAC;AACjD,CAAC;AACD;;;;GAIG;AACH,SAAS,cAAc,CAAC,IAAS,EAAE,IAAS;IACxC,gBAAgB;IAChB,IAAI,aAAa,CAAC,IAAI,CAAC;QAAE,OAAO,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM;SACxD,IAAI,OAAO,IAAI,KAAK,WAAW;QAAE,OAAO,IAAI,CAAC,CAAA,WAAW;SACxD,IAAI,aAAa,CAAC,IAAI,CAAC;QAAE,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,kCAAkC;SACnF,IAAI,OAAO,IAAI,KAAK,WAAW;QAAE,OAAO,IAAI,CAAC,CAAC,0BAA0B;AACjF,CAAC;AAED,IAAM,kBAAkB,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AAC/C,kBAAkB,CAAC,OAAO,CAAC,UAAA,GAAG;IAC1B,MAAM,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC;AACjC,CAAC,CAAC,CAAC;AAEH,0BAA0B;AAC1B,IAAM,iBAAiB,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;AACpD,iBAAiB,CAAC,OAAO,CAAC,UAAA,GAAG;IACzB,MAAM,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC;AAChC,CAAC,CAAC,CAAC;AAEH;;;;GAIG;AACH,MAAM,CAAC,OAAO,UAAU,WAAW,CAAC,OAA2B,EAAE,OAA4B;IACzF,IAAI,CAAC,OAAO,EAAE;QACV,OAAO,GAAG,EAAE,CAAC;KAChB;IACD,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU;IAC9C,0CAA0C;IAC1C,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;QACrB,UAAU,CAAC,GAAG,CAAC,CAAC;KACnB;IACD,eAAe;IACf,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;QACrB,sBAAsB;QACtB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACf,UAAU,CAAC,GAAG,CAAC,CAAC;SACnB;KACJ;IACD,SAAS,UAAU,CAAC,GAAW;QAC3B,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC,CAAC,qBAAqB;QAChE,WAAW;QACX,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,OAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IACrD,CAAC;IACD,OAAO,MAAM,CAAC;AAClB,CAAC\"}","code":"import { isPlainObject, deepMerge } from \"../helpers/util\";\r\n// 创建一个对象存储策略函数\r\nvar strats = Object.create(null);\r\n/**\r\n * 默认合并策略函数\r\n * @param val1 参数1\r\n * @param val2 参数2\r\n */\r\nfunction defaultStrat(val1, val2) {\r\n    // 默认val2不为空就返回\r\n    return typeof val2 !== 'undefined' ? val2 : val1;\r\n}\r\n/**\r\n * 只取val2的合并策略\r\n * @param val1\r\n * @param val2\r\n */\r\nfunction fromVal2Strat(val1, val2) {\r\n    if (typeof val2 !== 'undefined')\r\n        return val2;\r\n}\r\n/**\r\n * deep深度拷贝策略，进行val1，val2判断\r\n * @param val1\r\n * @param val2\r\n */\r\nfunction deepMergestrat(val1, val2) {\r\n    // 判断val2是不是普通对象\r\n    if (isPlainObject(val2))\r\n        return deepMerge(val1, val2); // 深拷贝\r\n    else if (typeof val2 !== 'undefined')\r\n        return val2; // 代表val2有值\r\n    else if (isPlainObject(val1))\r\n        return deepMerge(val1); // 当没有val2，只有val1，并且是普通对象的情况下，拷贝返回\r\n    else if (typeof val1 !== 'undefined')\r\n        return val1; // val1也不是空，也不是object，直接返回\r\n}\r\nvar stratKeysDeepMerge = ['headers', 'auth'];\r\nstratKeysDeepMerge.forEach(function (key) {\r\n    strats[key] = deepMergestrat;\r\n});\r\n// 拷贝的时候当val2有则直接拷贝val2的方式\r\nvar stratKeysFromVal2 = ['url', 'params', 'data'];\r\nstratKeysFromVal2.forEach(function (key) {\r\n    strats[key] = fromVal2Strat;\r\n});\r\n/**\r\n * 对默认配置和用户配置进行合并\r\n * @param config1 配置1 默认配置\r\n * @param config2 配置2 用户设置配置\r\n */\r\nexport default function mergeConfig(config1, config2) {\r\n    if (!config2) {\r\n        config2 = {};\r\n    }\r\n    var config = Object.create(null); // 创建一个空对象\r\n    // 遍历存入config，相同的处理，不相同的直接放入,这是对config2做遍历\r\n    for (var key in config2) {\r\n        mergeField(key);\r\n    }\r\n    // 对config1进行判断\r\n    for (var key in config1) {\r\n        // 当这个key没在config2中则调用\r\n        if (!config2[key]) {\r\n            mergeField(key);\r\n        }\r\n    }\r\n    function mergeField(key) {\r\n        var strat = strats[key] || defaultStrat; // 拿到策略函数，没有则使用默认策略函数\r\n        // 调用合并策略函数\r\n        config[key] = strat(config1[key], config2[key]);\r\n    }\r\n    return config;\r\n}\r\n//# sourceMappingURL=margeConfig.js.map","dts":{"name":"/Users/liu/Desktop/StrLiu/WebMaterial/Typescript-project/axios-typescript/dist/types/core/margeConfig.d.ts","writeByteOrderMark":false,"text":"import { AxiosRequestConfig } from \"../types\";\r\n/**\r\n * 对默认配置和用户配置进行合并\r\n * @param config1 配置1 默认配置\r\n * @param config2 配置2 用户设置配置\r\n */\r\nexport default function mergeConfig(config1: AxiosRequestConfig, config2?: AxiosRequestConfig): AxiosRequestConfig;\r\n"}}
